/* -*- mode: C; tab-width: 2; indent-tabs-mode: nil; -*- */

/*
 * This code has been contributed by the DARPA HPCS program.  Contact
 * David Koester <dkoester@mitre.org> or Bob Lucas <rflucas@isi.edu>
 * if you have questions.
 *
 *
 * GUPS (Giga UPdates per Second) is a measurement that profiles the memory
 * architecture of a system and is a measure of performance similar to MFLOPS.
 * The HPCS HPCchallenge RandomAccess benchmark is intended to exercise the
 * GUPS capability of a system, much like the LINPACK benchmark is intended to
 * exercise the MFLOPS capability of a computer.  In each case, we would
 * expect these benchmarks to achieve close to the "peak" capability of the
 * memory system. The extent of the similarities between RandomAccess and
 * LINPACK are limited to both benchmarks attempting to calculate a peak system
 * capability.
 *
 * GUPS is calculated by identifying the number of memory locations that can be
 * randomly updated in one second, divided by 1 billion (1e9). The term "randomly"
 * means that there is little relationship between one address to be updated and
 * the next, except that they occur in the space of one half the total system
 * memory.  An update is a read-modify-write operation on a table of 64-bit words.
 * An address is generated, the value at that address read from memory, modified
 * by an integer operation (add, and, or, xor) with a literal value, and that
 * new value is written back to memory.
 *
 * We are interested in knowing the GUPS performance of both entire systems and
 * system subcomponents --- e.g., the GUPS rating of a distributed memory
 * multiprocessor the GUPS rating of an SMP node, and the GUPS rating of a
 * single processor.  While there is typically a scaling of FLOPS with processor
 * count, a similar phenomenon may not always occur for GUPS.
 *
 * Select the memory size to be the power of two such that 2^n <= 1/2 of the
 * total memory.  Each CPU operates on its own address stream, and the single
 * table may be distributed among nodes. The distribution of memory to nodes
 * is left to the implementer.  A uniform data distribution may help balance
 * the workload, while non-uniform data distributions may simplify the
 * calculations that identify processor location by eliminating the requirement
 * for integer divides. A small (less than 1%) percentage of missed updates
 * are permitted.
 *
 * When implementing a benchmark that measures GUPS on a distributed memory
 * multiprocessor system, it may be required to define constraints as to how
 * far in the random address stream each node is permitted to "look ahead".
 * Likewise, it may be required to define a constraint as to the number of
 * update messages that can be stored before processing to permit multi-level
 * parallelism for those systems that support such a paradigm.  The limits on
 * "look ahead" and "stored updates" are being implemented to assure that the
 * benchmark meets the intent to profile memory architecture and not induce
 * significant artificial data locality. For the purpose of measuring GUPS,
 * we will stipulate that each thread is permitted to look ahead no more than
 * 1024 random address stream samples with the same number of update messages
 * stored before processing.
 *
 * The supplied MPI-1 code generates the input stream {A} on all processors
 * and the global table has been distributed as uniformly as possible to
 * balance the workload and minimize any Amdahl fraction.  This code does not
 * exploit "look-ahead".  Addresses are sent to the appropriate processor
 * where the table entry resides as soon as each address is calculated.
 * Updates are performed as addresses are received.  Each message is limited
 * to a single 64 bit long integer containing element ai from {A}.
 * Local offsets for T[ ] are extracted by the destination processor.
 *
 * If the number of processors is equal to a power of two, then the global
 * table can be distributed equally over the processors.  In addition, the
 * processor number can be determined from that portion of the input stream
 * that identifies the address into the global table by masking off log2(p)
 * bits in the address.
 *
 * If the number of processors is not equal to a power of two, then the global
 * table cannot be equally distributed between processors.  In the MPI-1
 * implementation provided, there has been an attempt to minimize the differences
 * in workloads and the largest difference in elements of T[ ] is one.  The
 * number of values in the input stream generated by each processor will be
 * related to the number of global table entries on each processor.
 *
 * The MPI-1 version of RandomAccess treats the potential instance where the
 * number of processors is a power of two as a special case, because of the
 * significant simplifications possible because processor location and local
 * offset can be determined by applying masks to the input stream values.
 * The non power of two case uses an integer division to determine the processor
 * location.  The integer division will be more costly in terms of machine
 * cycles to perform than the bit masking operations
 *
 * For additional information on the GUPS metric, the HPCchallenge RandomAccess
 * Benchmark,and the rules to run RandomAccess or modify it to optimize
 * performance -- see http://icl.cs.utk.edu/hpcc/
 *
 */

 ////////////////////////////////////////////////////////////////////////////////////////////////////
 // file:	altis\src\cuda\level2\dwt2d\gups\gups.cu
 //
 // summary:	Random access class
 // 
 // origin: HPCchallenge RandomAccess Benchmark(http://icl.cs.utk.edu/hpcc/)
 ////////////////////////////////////////////////////////////////////////////////////////////////////

#include <CL/sycl.hpp>
#include <dpct/dpct.hpp>

#include <chrono>
#include <cstdlib>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include "OptionParser.h"
#include "ResultDatabase.h"
#include "cudacommon.h"

#define POLY 0x0000000000000007ULL

union benchtype {
  /// <summary>	The 64. </summary>
  uint64_t u64;
  /// <summary>	The 32. </summary>
  sycl::uint2 u32{};
};

static dpct::constant_memory<uint64_t, 1> c_m2(64);
static dpct::global_memory<uint32_t, 1> d_error(1);

static void
d_init(size_t n, benchtype *t, sycl::nd_item<3> item_ct1)
{
  for (ptrdiff_t i = item_ct1.get_group(2) * item_ct1.get_local_range(2) +
                     item_ct1.get_local_id(2);
       i < n; i += item_ct1.get_group_range(2) * item_ct1.get_local_range(2)) {
    t[i].u64 = i;
  }
}

static uint64_t
d_starts(size_t n, uint64_t *c_m2)
{
  if (n == 0) {
    return 1;
  }

  int i = 63 - sycl::clz((long long)n);

  uint64_t ran = 2;
  while (i > 0) {
    uint64_t temp = 0;
    for (int j = 0; j < 64; j++) {
      if ((ran >> j) & 1) {
        temp ^= c_m2[j];
      }
    }
    ran = temp;
    i -= 1;
    if ((n >> i) & 1) {
      ran = (ran << 1) ^ ((int64_t) ran < 0 ? POLY : 0);
    }
  }

  return ran;
}

enum atomictype_t {
  ATOMICTYPE_CAS,
  ATOMICTYPE_XOR,
};

template<atomictype_t ATOMICTYPE>
void
d_bench(size_t n, benchtype *t, sycl::nd_item<3> item_ct1, uint64_t *c_m2)
{
  size_t num_threads =
      item_ct1.get_group_range(2) * item_ct1.get_local_range(2);
  size_t thread_num = item_ct1.get_group(2) * item_ct1.get_local_range(2) +
                      item_ct1.get_local_id(2);
  size_t start = thread_num * 4 * n / num_threads;
  size_t end = (thread_num + 1) * 4 * n / num_threads;
  benchtype ran;
  ran.u64 = d_starts(start, c_m2);
  for (ptrdiff_t i = start; i < end; ++i) {
    ran.u64 = (ran.u64 << 1) ^ ((int64_t) ran.u64 < 0 ? POLY : 0);
    switch (ATOMICTYPE) {
    case ATOMICTYPE_CAS:
      unsigned long long int *address, old, assumed;
      address = (unsigned long long int *)&t[ran.u64 & (n - 1)].u64;
      old = *address;
      do {
        assumed = old;
        old = dpct::atomic_compare_exchange_strong<
            unsigned long long, sycl::access::address_space::generic_space>(
            address, assumed, assumed ^ ran.u64);
      } while  (assumed != old);
      break;
    case ATOMICTYPE_XOR:
      dpct::atomic_fetch_xor<unsigned int,
                             sycl::access::address_space::generic_space>(
          &t[ran.u64 & (n - 1)].u32.x(), ran.u32.x());
      dpct::atomic_fetch_xor<unsigned int,
                             sycl::access::address_space::generic_space>(
          &t[ran.u64 & (n - 1)].u32.y(), ran.u32.y());
      break;
    }
  }
}

static void
d_check(size_t n, benchtype *t, sycl::nd_item<3> item_ct1, uint32_t *d_error)
{
  for (ptrdiff_t i = item_ct1.get_group(2) * item_ct1.get_local_range(2) +
                     item_ct1.get_local_id(2);
       i < n; i += item_ct1.get_group_range(2) * item_ct1.get_local_range(2)) {
    if (t[i].u64 != i) {
      dpct::atomic_fetch_add<uint32_t,
                             sycl::access::address_space::generic_space>(
          (uint32_t *)d_error, (uint32_t)1);
    }
  }
}

static void
starts(sycl::queue& queue)
{
  uint64_t m2[64];
  uint64_t temp = 1;
  for (ptrdiff_t i = 0; i < 64; i++) {
    m2[i] = temp;
    temp = (temp << 1) ^ ((int64_t) temp < 0 ? POLY : 0);
    temp = (temp << 1) ^ ((int64_t) temp < 0 ? POLY : 0);
  }
  queue.memcpy(c_m2.get_ptr(), m2, sizeof(m2)).wait();
}

void addBenchmarkSpecOptions(OptionParser &op) {
   // TODO, maybe add benchmark specs 
  op.addOption("shifts", OPT_INT, "20", "specify bit shift for the number of elements in update table", '\0');
}

class init_kernel_id;
class bench_cas_kernel_id;
class bench_xor_kernel_id;
class check_kernel_id;

void RunBenchmark(ResultDatabase &DB, OptionParser &op, size_t device_idx) {
  std::cout << "Running GUPS" << std::endl;

    std::vector<cl::sycl::device> devices = cl::sycl::device::get_devices();
    sycl::queue                   queue(devices[device_idx],
                      sycl::property::queue::enable_profiling {});

  size_t n = 0;
  const int passes = op.getOptionInt("passes");
  const bool uvm = op.getOptionBool("uvm");

  // Specify table size
  int problemSizes[5] = {20, 22, 24, 26, 32}; // size 5 might be extremely long!
  int toShifts = problemSizes[op.getOptionInt("size") - 1];

  int logn = op.getOptionInt("shifts");
  // TODO: watch out size
  if (logn > 0 && logn != 20) 
    n = (size_t) 1 << logn;
   else 
    n = (size_t) 1 << toShifts;

  std::cout << "Total table size = " << n << " (" << n*sizeof(uint64_t) << " bytes.)" << std::endl;

  // Init global memory here, before we use it.
  //
  d_error.init(queue);
  c_m2.init(queue);

  starts(queue);

  dpct::device_info prop;
  dpct::dev_mgr::instance().get_device(device_idx).get_device_info(prop);
  printf("Warp size = %d.\n", prop.get_max_sub_group_size());
  printf("Multi-processor count = %d.\n", prop.get_max_compute_units());
  printf("Max threads per multi-processor = %d.\n",
         prop.get_max_work_items_per_compute_unit());

  benchtype *d_t = NULL;
  if (uvm) 
    d_t = sycl::malloc_shared<benchtype>(n, queue);
   else 
    d_t = sycl::malloc_device<benchtype>(n, queue);
  if (nullptr == d_t)
  {
    std::cerr << "Error allocating memory on device." << std::endl;
    std::terminate();
  }
  
  // max warp size
  sycl::range<3> grid(1, 1,
                      prop.get_max_compute_units() *
                          (prop.get_max_work_items_per_compute_unit() /
                           prop.get_max_sub_group_size()));
  // # as if scheduling warps instead of blocks
  sycl::range<3> thread(1, 1, prop.get_max_sub_group_size());
  sycl::event begin, end;
  std::chrono::time_point<std::chrono::steady_clock> begin_ct1;
  std::chrono::time_point<std::chrono::steady_clock> end_ct1;

  // The kernels.
  //
  auto init_kernel = [&]() {
            queue.parallel_for<init_kernel_id>(
                sycl::nd_range<3>(grid * thread, thread),
                [=](sycl::nd_item<3> item_ct1) {
                      d_init(n, d_t, item_ct1);
                });
                queue.wait_and_throw();
  };
  auto check_kernel = [&]() -> sycl::event {
    queue.memset(d_error.get_ptr(), 0, sizeof(uint32_t)).wait();
    return queue.submit([&](sycl::handler &cgh) {
          auto d_error_ptr_ct1 = d_error.get_ptr();
          cgh.parallel_for<check_kernel_id>(sycl::nd_range<3>(grid * thread, thread),
                            [=](sycl::nd_item<3> item_ct1) {
                                  d_check(n, d_t, item_ct1,
                                          d_error_ptr_ct1);
                            });
    });
  };

  string atts = "ATOMICTYPE_CAS";
  for (int i = 0; i < passes; i++) {
    init_kernel();
    queue.wait_and_throw();

    auto cas_bench_event = queue.submit([&](sycl::handler &cgh) {
                  auto c_m2_ptr_ct1 = c_m2.get_ptr();

                  cgh.parallel_for<bench_cas_kernel_id>(sycl::nd_range<3>(grid * thread, thread),
                                   [=](sycl::nd_item<3> item_ct1) {
                                         d_bench<ATOMICTYPE_CAS>(
                                             n, d_t, item_ct1, c_m2_ptr_ct1);
                                   });
            });
    cas_bench_event.wait();
    float ns =
        cas_bench_event
            .get_profiling_info<sycl::info::event_profiling::command_end>()
        - cas_bench_event.get_profiling_info<
            sycl::info::event_profiling::command_start>();
    double time = ns * 1.e-9;

    DB.AddResult("Elapsed time", atts, "seconds", time);
    double gups = 4 * n / ((double)ns* 1.0e-6) * 1.0e-6;
    DB.AddResult("Giga Updates per second", atts, "GUP/s", gups);

    uint32_t h_error;
    check_kernel();
    queue.memcpy(&h_error, d_error.get_ptr(), sizeof(uint32_t)).wait();
    if (op.getOptionBool("verbose"))
      printf("Verification (ATOMICTYPE_CAS): Found %u errors.\n", h_error);
  }
  
  atts = "ATOMICTYPE_XOR";
  for (int i = 0; i < passes; i++) {
    init_kernel();
    queue.wait_and_throw();

    auto xor_bench_event = queue.submit([&](sycl::handler &cgh) {
                  c_m2.init();

                  auto c_m2_ptr_ct1 = c_m2.get_ptr();

                  cgh.parallel_for<bench_xor_kernel_id>(sycl::nd_range<3>(grid * thread, thread),
                                   [=](sycl::nd_item<3> item_ct1) {
                                         d_bench<ATOMICTYPE_XOR>(
                                             n, d_t, item_ct1, c_m2_ptr_ct1);
                                   });
            });
    xor_bench_event.wait();
    float ns =
        xor_bench_event
            .get_profiling_info<sycl::info::event_profiling::command_end>()
        - xor_bench_event.get_profiling_info<
            sycl::info::event_profiling::command_start>();
    double time = ns * 1.e-9;

    DB.AddResult("Elapsed time", atts, "seconds", time);
    double gups = 4 * n / ((double)ns* 1.0e-6) * 1.0e-6;
    DB.AddResult("Giga Updates per second", atts, "GUP/s", gups);
    
    uint32_t h_error;
    check_kernel();
    queue.memcpy(&h_error, d_error.get_ptr(), sizeof(uint32_t)).wait();
    if (op.getOptionBool("verbose")) 
      printf("Verification (ATOMICTYPE_XOR): Found %u errors.\n", h_error);
  }

  queue.wait_and_throw();
  sycl::free(d_t, queue);

  sycl::free(c_m2.get_ptr(), queue);
  sycl::free(d_error.get_ptr(), queue);
  d_error.init();
  c_m2.init();
}
