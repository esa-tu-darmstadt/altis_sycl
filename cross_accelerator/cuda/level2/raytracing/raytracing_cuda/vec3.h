////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	C:\Users\ed\source\repos\altis\src\cuda\level2\raytracing\vec3.h
//
// summary:	Declares the vector 3 class
// 
// origin: Ray tracing(https://github.com/ssangx/raytracing.cuda)
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef VEC3H
#define VEC3H

#include <CL/sycl.hpp>
#include <math.h>
#include <stdlib.h>
#include <iostream>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A vector 3. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class vec3  {


public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    vec3() {}

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="e0">	The e 0. </param>
    /// <param name="e1">	The first float. </param>
    /// <param name="e2">	The second float. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    vec3(float e0, float e1, float e2) { e[0] = e0; e[1] = e1; e[2] = e2; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the x coordinate. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	A float. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float x() const { return e[0]; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the y coordinate. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	A float. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float y() const { return e[1]; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the z coordinate. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	A float. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float z() const { return e[2]; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the r. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	A float. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float r() const { return e[0]; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the g. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	A float. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float g() const { return e[1]; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the b. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	A float. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float b() const { return e[2]; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Addition operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	The result of the operation. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline const vec3& operator+() const { return *this; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Negation operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	The result of the operation. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline vec3 operator-() const { return vec3(-e[0], -e[1], -e[2]); }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Array indexer operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="i">	Zero-based index of the. </param>
    ///
    /// <returns>	The indexed value. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float operator[](int i) const { return e[i]; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Array indexer operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="i">	Zero-based index of the. </param>
    ///
    /// <returns>	The indexed value. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float& operator[](int i) { return e[i]; };

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Addition assignment operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="v2">	The second value. </param>
    ///
    /// <returns>	The result of the operation. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline vec3& operator+=(const vec3 &v2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Subtraction assignment operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="v2">	The second value. </param>
    ///
    /// <returns>	The result of the operation. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline vec3& operator-=(const vec3 &v2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Multiplication assignment operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="v2">	The second value. </param>
    ///
    /// <returns>	The result of the operation. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline vec3& operator*=(const vec3 &v2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Division assignment operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="v2">	The second value. </param>
    ///
    /// <returns>	The result of the operation. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline vec3& operator/=(const vec3 &v2);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Multiplication assignment operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="t">	A float to process. </param>
    ///
    /// <returns>	The result of the operation. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline vec3& operator*=(const float t);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Division assignment operator. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <param name="t">	A float to process. </param>
    ///
    /// <returns>	The result of the operation. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline vec3& operator/=(const float t);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the length. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	A float. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float length() const {
            return sycl::sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Squared length. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ///
    /// <returns>	A float. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline float squared_length() const { return e[0]*e[0] + e[1]*e[1] + e[2]*e[2]; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes unit vector. </summary>
    ///
    /// <remarks>	Ed, 5/20/2020. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    inline void make_unit_vector();


    /// <summary>	The e[ 3]. </summary>
    float e[3];
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Stream extraction operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="is">	[in,out] The is. </param>
/// <param name="t"> 	[in,out] A vec3 to process. </param>
///
/// <returns>	The shifted result. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::istream& operator>>(std::istream &is, vec3 &t) {
    is >> t.e[0] >> t.e[1] >> t.e[2];
    return is;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Stream insertion operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="os">	[in,out] The operating system. </param>
/// <param name="t"> 	A vec3 to process. </param>
///
/// <returns>	The shifted result. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline std::ostream& operator<<(std::ostream &os, const vec3 &t) {
    os << t.e[0] << " " << t.e[1] << " " << t.e[2];
    return os;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Makes unit vector. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline void vec3::make_unit_vector() {
    float k = 1.0 / sycl::sqrt(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]);
    e[0] *= k; e[1] *= k; e[2] *= k;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Addition operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v1">	The first value. </param>
/// <param name="v2">	A value to add to it. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 operator+(const vec3 &v1, const vec3 &v2) {
    return vec3(v1.e[0] + v2.e[0], v1.e[1] + v2.e[1], v1.e[2] + v2.e[2]);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Subtraction operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v1">	The first value. </param>
/// <param name="v2">	A value to subtract from it. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 operator-(const vec3 &v1, const vec3 &v2) {
    return vec3(v1.e[0] - v2.e[0], v1.e[1] - v2.e[1], v1.e[2] - v2.e[2]);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Multiplication operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v1">	The first value to multiply. </param>
/// <param name="v2">	The second value to multiply. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 operator*(const vec3 &v1, const vec3 &v2) {
    return vec3(v1.e[0] * v2.e[0], v1.e[1] * v2.e[1], v1.e[2] * v2.e[2]);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Division operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v1">	The numerator. </param>
/// <param name="v2">	The denominator. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 operator/(const vec3 &v1, const vec3 &v2) {
    return vec3(v1.e[0] / v2.e[0], v1.e[1] / v2.e[1], v1.e[2] / v2.e[2]);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Multiplication operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="t">	The first value to multiply. </param>
/// <param name="v">	The second value to multiply. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 operator*(float t, const vec3 &v) {
    return vec3(t*v.e[0], t*v.e[1], t*v.e[2]);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Division operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v">	The numerator. </param>
/// <param name="t">	The denominator. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 operator/(vec3 v, float t) {
    return vec3(v.e[0]/t, v.e[1]/t, v.e[2]/t);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Multiplication operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v">	The first value to multiply. </param>
/// <param name="t">	The second value to multiply. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 operator*(const vec3 &v, float t) {
    return vec3(t*v.e[0], t*v.e[1], t*v.e[2]);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Dots. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v1">	The first value. </param>
/// <param name="v2">	The second value. </param>
///
/// <returns>	A float. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline float dot(const vec3 &v1, const vec3 &v2) {
    return v1.e[0] *v2.e[0] + v1.e[1] *v2.e[1]  + v1.e[2] *v2.e[2];
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Cross. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v1">	The first value. </param>
/// <param name="v2">	The second value. </param>
///
/// <returns>	A vec3. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 cross(const vec3 &v1, const vec3 &v2) {
    return vec3( (v1.e[1]*v2.e[2] - v1.e[2]*v2.e[1]),
                (-(v1.e[0]*v2.e[2] - v1.e[2]*v2.e[0])),
                (v1.e[0]*v2.e[1] - v1.e[1]*v2.e[0]));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Addition assignment operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v">	A vec3 to process. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3& vec3::operator+=(const vec3 &v){
    e[0]  += v.e[0];
    e[1]  += v.e[1];
    e[2]  += v.e[2];
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Multiplication assignment operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v">	A vec3 to process. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3& vec3::operator*=(const vec3 &v){
    e[0]  *= v.e[0];
    e[1]  *= v.e[1];
    e[2]  *= v.e[2];
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Division assignment operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v">	A vec3 to process. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3& vec3::operator/=(const vec3 &v){
    e[0]  /= v.e[0];
    e[1]  /= v.e[1];
    e[2]  /= v.e[2];
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Subtraction assignment operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v">	A vec3 to process. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3& vec3::operator-=(const vec3& v) {
    e[0]  -= v.e[0];
    e[1]  -= v.e[1];
    e[2]  -= v.e[2];
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Multiplication assignment operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="t">	A float to process. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3& vec3::operator*=(const float t) {
    e[0]  *= t;
    e[1]  *= t;
    e[2]  *= t;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Division assignment operator. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="t">	A float to process. </param>
///
/// <returns>	The result of the operation. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3& vec3::operator/=(const float t) {
    float k = 1.0/t;

    e[0]  *= k;
    e[1]  *= k;
    e[2]  *= k;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Unit vector. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="v">	A vec3 to process. </param>
///
/// <returns>	A vec3. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

inline vec3 unit_vector(vec3 v) {
    /*
    DPCT1084:1292: The function call has multiple migration results in different
    template instantiations that could not be unified. You may need to adjust
    the code.
    */
    return v / v.length();
}

#endif
