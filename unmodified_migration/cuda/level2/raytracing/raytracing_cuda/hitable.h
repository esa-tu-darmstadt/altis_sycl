////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	altis\src\cuda\level2\raytracing\hitable.h
//
// summary:	Declares the hitable class
// 
//  origin: Ray tracing(https://github.com/ssangx/raytracing.cuda)
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef HITABLEH
#define HITABLEH

#include <sycl/sycl.hpp>
#include <dpct/dpct.hpp>
#include "ray.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A material. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class material;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Information about the hit. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

struct hit_record
{
    /// <summary>	A float to process. </summary>
    float t;
    /// <summary>	A vec3 to process. </summary>
    vec3 p;
    /// <summary>	The normal. </summary>
    vec3 normal;
    /// <summary>	The matrix pointer. </summary>
    material *mat_ptr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A hitable. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class hitable  {
    public:

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>	Hits. </summary>
        ///
        /// <remarks>	Ed, 5/20/2020. </remarks>
        ///
        /// <param name="r">		A ray to process. </param>
        /// <param name="t_min">	The minimum. </param>
        /// <param name="t_max">	The maximum. </param>
        /// <param name="rec">  	[in,out] The record. </param>
        ///
        /// <returns>	True if it succeeds, false if it fails. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        /*
        DPCT1109:57: Virtual functions cannot be called in SYCL device code. You
        need to adjust the code.
        */
        virtual bool hit(const ray &r, float t_min, float t_max,
                         hit_record &rec) const = 0;
};

#endif
