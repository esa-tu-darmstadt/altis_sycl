////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	altis\src\cuda\level2\lavamd\lavaMD.h
//
// summary:	Declares the lava md class
// 
// origin: Rodinia (http://rodinia.cs.virginia.edu/doku.php)
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <sycl/sycl.hpp>
#include <dpct/dpct.hpp>
#include "OptionParser.h"
#include "ResultDatabase.h"
#include "cudacommon.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A macro that defines fp. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

#define fp double

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A macro that defines seed. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

#define SEED 7

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A macro that defines number par per box. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

#define NUMBER_PAR_PER_BOX 100							// keep this low to allow more blocks that share shared memory to run concurrently, code does not work for larger than 110, more speedup can be achieved with larger number and no shared memory used


/* #define NUMBER_THREADS 128								// this should be roughly equal to NUMBER_PAR_PER_BOX for best performance */

// Parameterized work group size
#ifdef RD_WG_SIZE_0_0

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A macro that defines number threads. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

        #define NUMBER_THREADS RD_WG_SIZE_0_0
#elif defined(RD_WG_SIZE_0)

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A macro that defines number threads. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

        #define NUMBER_THREADS RD_WG_SIZE_0
#elif defined(RD_WG_SIZE)

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A macro that defines number threads. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

        #define NUMBER_THREADS RD_WG_SIZE
#else

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A macro that defines number threads. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

        #define NUMBER_THREADS 128
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A macro that defines dot. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="A">	A void to process. </param>
/// <param name="B">	A void to process. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

#define DOT(A,B) ((A.x)*(B.x)+(A.y)*(B.y)+(A.z)*(B.z))	// STABLE

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A three vector. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct dpct_type_369047
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the z coordinate. </summary>
	///
	/// <value>	The z coordinate. </value>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	fp x, y, z;

} THREE_VECTOR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A four vector. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct dpct_type_805851
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the z coordinate. </summary>
	///
	/// <value>	The z coordinate. </value>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	fp v, x, y, z;

} FOUR_VECTOR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A nei string. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct nei_str
{

	// neighbor box

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the z coordinate. </summary>
	///
	/// <value>	The z coordinate. </value>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int x, y, z;
	/// <summary>	Number of. </summary>
	int number;
	/// <summary>	The offset. </summary>
	long offset;

} nei_str;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A box string. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct box_str
{

	// home box

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the z coordinate. </summary>
	///
	/// <value>	The z coordinate. </value>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	int x, y, z;
	/// <summary>	Number of. </summary>
	int number;
	/// <summary>	The offset. </summary>
	long offset;

	// neighbor boxes
	/// <summary>	The nn. </summary>
	int nn;
	/// <summary>	The nei[ 26]. </summary>
	nei_str nei[26];

} box_str;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A par string. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct par_str
{

	/// <summary>	The alpha. </summary>
	fp alpha;

} par_str;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A dim string. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct dim_str
{

	// input arguments
	/// <summary>	The current argument. </summary>
	int cur_arg;
	/// <summary>	The arch argument. </summary>
	int arch_arg;
	/// <summary>	The cores argument. </summary>
	int cores_arg;
	/// <summary>	The boxes 1d argument. </summary>
	int boxes1d_arg;

	// system memory
	/// <summary>	Number of boxes. </summary>
	long number_boxes;
	/// <summary>	The box memory. </summary>
	long box_mem;
	/// <summary>	The space element. </summary>
	long space_elem;
	/// <summary>	The space memory. </summary>
	long space_mem;
	/// <summary>	The second space memory. </summary>
	long space_mem2;

} dim_str;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Executes the test operation. </summary>
///
/// <remarks>	Ed, 5/20/2020. </remarks>
///
/// <param name="resultDB">	[in,out] The result database. </param>
/// <param name="op">	   	[in,out] The operation. </param>
/// <param name="boxes1d"> 	The boxes 1d. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void runTest(ResultDatabase &resultDB, OptionParser &op, int boxes1d);
